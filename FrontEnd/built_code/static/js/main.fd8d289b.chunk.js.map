{"version":3,"sources":["style.module.css","Results.js","App.js","index.js"],"names":["module","exports","Recipe","title","ingredients","url","image","Card","className","style","recipe","Img","recipe_picture","src","Body","Title","Text","href","target","rel","Button","view_recipe_button","App","useState","valid_ingredient_list","setIngredients","users_maximum_ingredients","users_selected_ingredients_array","updateUsersSelectedIngredients","ingredients_query_string_for_api","recipe_results_from_api","setRecipes","useEffect","console","log","getvalidingredientapiresponse","a","fetch","apiresponse","json","data2","Ingredients","map","e","value","join","getrecipeapiresponse","data","Recipes","options","option","label","Top_Bar","logo_text","wizard_logo_text","help_text","Form","filterOption","createFilter","ignoreAccents","isMulti","IngredientsSelector","onChange","autoFocus","placeholder","MaxIngredientsSelectorContainer","htmlFor","id","type","MaxIngredientsSelector","defaultValue","min","max","Recipes_Area","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fd8d289b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Top_Bar\":\"style_Top_Bar__1V1Xf\",\"logo_text\":\"style_logo_text__Mmg8M\",\"wizard_logo_text\":\"style_wizard_logo_text__2Zm4G\",\"help_text\":\"style_help_text__22qhe\",\"IngredientsSelector\":\"style_IngredientsSelector__Bz0j4\",\"MaxIngredientsSelectorContainer\":\"style_MaxIngredientsSelectorContainer__2CRpN\",\"MaxIngredientsSelector\":\"style_MaxIngredientsSelector__V_e5e\",\"Recipes_Area\":\"style_Recipes_Area__3cmeu\",\"recipe\":\"style_recipe__3LDTO\",\"recipe_picture\":\"style_recipe_picture__3sZK2\",\"view_recipe_button\":\"style_view_recipe_button__19Ksm\"};","import React from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport {Card,Button} from 'react-bootstrap'\r\nimport style from './style.module.css';\r\n\r\nconst Recipe = ({title,ingredients,url,image}) => {\r\n\r\n    return(\r\n\r\n        <Card className={style.recipe}>          \r\n            <Card.Img className={style.recipe_picture} src={image}/>\r\n            <Card.Body>\r\n                <Card.Title>{title}</Card.Title>\r\n                <Card.Text><b>Ingredients: </b><i>{ingredients}</i></Card.Text>\r\n            </Card.Body> \r\n            <a href ={url} target=\"_blank\" rel=\"noreferrer\"> <Button className={style.view_recipe_button}>View Recipe</Button></a>          \r\n        </Card>\r\n\r\n    );\r\n\r\n\r\n}\r\n\r\nexport default Recipe;\r\n","import React, {useEffect, useState} from \"react\";\nimport Recipe from './Results';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport {Form} from 'react-bootstrap'\nimport style from './style.module.css';\nimport Select, { createFilter, } from 'react-select';\n\n\nfunction App() {\n\n  const [valid_ingredient_list, setIngredients] = useState([]);\n  let [users_maximum_ingredients, setMaxIngredientsQuery] = useState('15');\n  const [users_selected_ingredients_array, updateUsersSelectedIngredients] = useState([]);\n  let [ingredients_query_string_for_api, setIngredientsQuery] = useState('flour');\n  const [recipe_results_from_api, setRecipes] = useState([]);\n\n\n  useEffect(() => {\n    console.log('useEffect triggered for page load ')\n    getvalidingredientapiresponse();\n  }, []);\n\n  const getvalidingredientapiresponse = async () => {\n    var apiresponse = await fetch(`http://192.168.0.24:8000/valid_ingredient_list/`)\n    const data2 = await apiresponse.json();\n    setIngredients(data2.Ingredients);\n  }\n\n  useEffect(() => {\n    if (users_selected_ingredients_array == 0) {}\n    else {\n      ingredients_query_string_for_api = (users_selected_ingredients_array.map(e => e.value).join(','))\n      getrecipeapiresponse();\n    }\n  }, [users_selected_ingredients_array]);\n\n  const updateUsersMaximumIngredientsSetting = e => {\n    if (users_selected_ingredients_array == 0) {}\n    else {\n      users_maximum_ingredients = (e.target.value); \n      ingredients_query_string_for_api = (users_selected_ingredients_array.map(e => e.value).join(','))\n      getrecipeapiresponse(); \n    }\n  }\n\n  const getrecipeapiresponse = async () => {\n    var url = 'http://192.168.0.24:8000/search_recipes_by_ingredients/'+ingredients_query_string_for_api+\"/\"+users_maximum_ingredients\n    console.log('Attempting to get API response using URL '+url)\n    var apiresponse = await fetch(url)\n    const data = await apiresponse.json();\n    setRecipes(data.Recipes);  \n  }\n\n\n  var options = valid_ingredient_list.map(option => ({value: option,label: option}));\n\n        return (              \n        <div className = \"App\">\n          <div className = {style.Top_Bar}> \n              <div >\n                <h1 className={style.logo_text}>Recipe<span className={style.wizard_logo_text}>Wizard</span ></h1>\n              </div>\n              <div className={style.help_text}>\n                Search through thousands of recipes using ingredient combinations. Get recipe ideas, use up leftover ingredients. \n              </div>\n              <Form className = \"search-form\">  \n                <Select \n                options={options} \n                filterOption={createFilter({ignoreAccents: false})}\n                isMulti className = {style.IngredientsSelector}    \n                onChange ={updateUsersSelectedIngredients} \n                autoFocus={true}\n                placeholder={<div>Start typing some ingredient names</div>}  \n                /> \n                <div className={style.MaxIngredientsSelectorContainer}>\n                  <label htmlFor=\"maximum_ingredients\" className={style.help_text}>Recipe Simplicity</label>\n                  <input \n                  id=\"maximum_ingredients\"\n                  type=\"range\" \n                  className = {style.MaxIngredientsSelector} \n                  defaultValue={15}\n                  min=\"1\" max=\"100\"\n                  onChange ={updateUsersMaximumIngredientsSetting}>\n                  \n                  </input>\n                </div>\n              </Form>\n          </div>\n          \n          <div className = {style.Recipes_Area}> \n          {recipe_results_from_api.map(recipe => (<Recipe \n          key = {recipe['ID']} \n          title = {recipe['Title']} \n          ingredients = {recipe['Ingredients']} \n          url = {recipe['URL']} \n          image = {recipe['Picture_URL']} />))}\n          </div>\n        </div>\n        );\n        \n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}